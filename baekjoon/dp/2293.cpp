#include <iostream>
using namespace std;

int n, k;
int coin[110], dp[10010];

/*

물론입니다! 1원, 2원, 5원이 있는 경우로 k=10인 경우에 대한 `dp` 배열의 변화를 자세히 살펴보겠습니다.

우선 `dp` 배열을 초기화합니다. 여기서 `dp[i]`는 i원을 만들기 위한 모든 동전의 조합의 경우의 수를 의미합니다. 초기값은 0원을 만드는 방법은 1가지라는 것을 나타내기 위해 `dp[0] = 1`로 설정됩니다.

- 초기 상태: `dp = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]`

1. 1원 동전을 고려할 때:

각 i에 대하여 `dp[i] += dp[i - 1]` (1원 동전을 추가하여 i원을 만드는 방법)

- `dp` 배열 변화: 
    - `dp[1] = dp[1] + dp[0] = 1`
    - `dp[2] = dp[2] + dp[1] = 1`
    - `dp[3] = dp[3] + dp[2] = 1`
    ...
    - `dp[10] = dp[10] + dp[9] = 1`

`dp = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]`

2. 2원 동전을 고려할 때:

각 i에 대하여 `dp[i] += dp[i - 2]` (2원 동전을 추가하여 i원을 만드는 방법)

- `dp` 배열 변화:
    - `dp[2] = dp[2] + dp[0] = 2`
    - `dp[3] = dp[3] + dp[1] = 2`
    ...
    - `dp[10] = dp[10] + dp[8] = 2 + 1 = 3`

`dp = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]`

3. 5원 동전을 고려할 때:

각 i에 대하여 `dp[i] += dp[i - 5]` (5원 동전을 추가하여 i원을 만드는 방법)

- `dp` 배열 변화:
    - `dp[5] = dp[5] + dp[0] = 4`
    - `dp[6] = dp[6] + dp[1] = 5`
    ...
    - `dp[10] = dp[10] + dp[5] = 6 + 4 = 10`

`dp = [1, 1, 2, 2, 3, 4, 5, 6, 7, 8, 10]`

결론적으로, 10원을 만드는 방법은 총 10가지입니다.

이 과정을 통해 동전의 종류를 차례대로 고려하면서 `dp` 배열을 업데이트하게 됩니다.

*/

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    cin >> n >> k;
    for(int i=1; i<=n; i++) cin >> coin[i];

    dp[0] = 1; // 0원을 만드는 방법은 1가지입니다.

    for(int j=1; j<=n; j++) {
        for(int i=coin[j]; i<=k; i++) {
            dp[i] += dp[i - coin[j]];
        }
    }

    // k원을 만드는 경우의 수 출력
    cout << dp[k] << "\n";

    return 0;
}
